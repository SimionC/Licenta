// <auto-generated />
using App.Server.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("App.Server.Models.CourseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JoinPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("App.Server.ORM.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("App.Server.ORM.CourseWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseWork", (string)null);
                });

            modelBuilder.Entity("App.Server.ORM.CoursesNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("NoteId");

                    b.ToTable("Courses_Notes", (string)null);
                });

            modelBuilder.Entity("App.Server.ORM.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Grade1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Grade");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("App.Server.ORM.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisibilityTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VisibilityTypeId");

                    b.HasIndex(new[] { "Guid" }, "IX_Notes_Guid")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("App.Server.ORM.SubmittedWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GradeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("NoteId");

                    b.ToTable("SubmittedWork", (string)null);
                });

            modelBuilder.Entity("App.Server.ORM.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenume")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "StudentId" }, "IX_Users_StudentId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Server.ORM.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_UserTypes_Name")
                        .IsUnique();

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("App.Server.ORM.UsersCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Users_Courses", (string)null);
                });

            modelBuilder.Entity("App.Server.ORM.UsersNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PermissionLevel")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("UserId");

                    b.ToTable("Users_Notes", (string)null);
                });

            modelBuilder.Entity("App.Server.ORM.VisibilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_VisibilityType_Name")
                        .IsUnique();

                    b.ToTable("VisibilityType", (string)null);
                });

            modelBuilder.Entity("App.Server.ORM.CourseWork", b =>
                {
                    b.HasOne("App.Server.ORM.Course", "Course")
                        .WithMany("CourseWorks")
                        .HasForeignKey("CourseId")
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("App.Server.ORM.CoursesNote", b =>
                {
                    b.HasOne("App.Server.ORM.Course", "Course")
                        .WithMany("CoursesNotes")
                        .HasForeignKey("CourseId")
                        .IsRequired();

                    b.HasOne("App.Server.ORM.Note", "Note")
                        .WithMany("CoursesNotes")
                        .HasForeignKey("NoteId")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("App.Server.ORM.Note", b =>
                {
                    b.HasOne("App.Server.ORM.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.HasOne("App.Server.ORM.VisibilityType", "VisibilityType")
                        .WithMany("Notes")
                        .HasForeignKey("VisibilityTypeId")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisibilityType");
                });

            modelBuilder.Entity("App.Server.ORM.SubmittedWork", b =>
                {
                    b.HasOne("App.Server.ORM.Grade", "Grade")
                        .WithMany("SubmittedWorks")
                        .HasForeignKey("GradeId");

                    b.HasOne("App.Server.ORM.Note", "Note")
                        .WithMany("SubmittedWorks")
                        .HasForeignKey("NoteId")
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("App.Server.ORM.User", b =>
                {
                    b.HasOne("App.Server.ORM.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("App.Server.ORM.UsersCourse", b =>
                {
                    b.HasOne("App.Server.ORM.Course", "Course")
                        .WithMany("UsersCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired();

                    b.HasOne("App.Server.ORM.User", "User")
                        .WithMany("UsersCourses")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Server.ORM.UsersNote", b =>
                {
                    b.HasOne("App.Server.ORM.Note", "Note")
                        .WithMany("UsersNotes")
                        .HasForeignKey("NoteId")
                        .IsRequired();

                    b.HasOne("App.Server.ORM.User", "User")
                        .WithMany("UsersNotes")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Server.ORM.Course", b =>
                {
                    b.Navigation("CourseWorks");

                    b.Navigation("CoursesNotes");

                    b.Navigation("UsersCourses");
                });

            modelBuilder.Entity("App.Server.ORM.Grade", b =>
                {
                    b.Navigation("SubmittedWorks");
                });

            modelBuilder.Entity("App.Server.ORM.Note", b =>
                {
                    b.Navigation("CoursesNotes");

                    b.Navigation("SubmittedWorks");

                    b.Navigation("UsersNotes");
                });

            modelBuilder.Entity("App.Server.ORM.User", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("UsersCourses");

                    b.Navigation("UsersNotes");
                });

            modelBuilder.Entity("App.Server.ORM.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Server.ORM.VisibilityType", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
